version: 2
jobs:
  test-build-arbiter2:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:8.0
      - image: cimg/base:stable
      - image: cimg/mysql:8.0
        environment:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: arbiter
          MYSQL_USER: dev
          MYSQL_PASSWORD: password
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      SBT_VERSION: 1.5.5
      ARBITER2_IMAGE_NAME: mairo/arbiter2
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 20`;
            do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Prepare mysql for tests
          command: cat /dev/null | sbt flywayClean flywayMigrate
      - run:
          name: Prepare jar
          command: cat /dev/null | sbt clean assembly

  build-arbiter2:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:8.0
      - image: cimg/base:stable
      - image: cimg/mysql:8.0
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASS
        environment:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: arbiter
          MYSQL_USER: dev
          MYSQL_PASSWORD: password
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      SBT_VERSION: 1.5.5
      ARBITER2_IMAGE_NAME: mairo/arbiter2
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 20`;
            do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Prepare mysql for tests
          command: cat /dev/null | sbt flywayClean flywayMigrate
      - run:
          name: Prepare jar
          command: cat /dev/null | sbt clean assembly
      - setup_remote_docker
      - run:
          name: Build docker image
          command: docker build -t $ARBITER2_IMAGE_NAME:latest .
      - run:
          name: Save docker image
          command: docker save -o image_arbiter2.tar $ARBITER2_IMAGE_NAME:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image_arbiter2.tar

  build-dipper:
    docker:
      - image: cimg/buildpack-deps:stretch
    working_directory: ~/repo
    environment:
      BOT_IMAGE_NAME: mairo/dipper
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - run: cd services/dipper && docker build -t $BOT_IMAGE_NAME:latest .
      - run: cd services/dipper && docker save -o ../../image_dipper.tar $BOT_IMAGE_NAME:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image_dipper.tar

  migrate-prod-mysq:
    environment:
      # Customize the JVM maximum heap limit
      SBT_VERSION: 1.3.10
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    docker:
      - image: cimg/openjdk:8.0
      - image: cimg/base:stable
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Migrate prod env
          command: cat /dev/null | sbt -Dfw.user=$PROD_MYSQL_USER -Dfw.pass=$PROD_MYSQL_PASS -Dfw.locations=db/migration -Dfw.host=$PROD_MYSQL_URI "flywayMigrate"

  publish-arbiter2-image:
    docker:
      - image: cimg/openjdk:8.0
      - image: cimg/base
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load docker image
          command: docker load -i /tmp/workspace/image_arbiter2.tar
      - run:
          name: Login to dockerhub
          command: cat /dev/null | echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Publish new docker image
          command: cat /dev/null | docker push mairo/arbiter2:latest

  publish-dipper-image:
    environment:
      BOT_IMAGE_NAME: mairo/dipper
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run: docker load -i /tmp/workspace/image_dipper.tar
      - run: cat /dev/null | docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASS"
      - run: cat /dev/null | docker push mairo/dipper:latest

  redeploy-services:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run: echo $SSH_IDENTITY
      - run:
          name: Update known hosts
          command: ssh-keyscan -H $HOST_TO_DEPLOY >> ~/.ssh/known_hosts
      - run:
          name: Redeploy images
          command: ssh $SSH_IDENTITY 'cd arbiter_infra && zx deployer.mjs'

workflows:
  version: 2
  build-master:
    jobs:
      - test-build-arbiter2:
          context: myctx
          filters:
            branches:
              ignore:
                - dev
      - build-arbiter2:
          context: myctx
          filters:
            branches:
              only:
                - dev
      - migrate-prod-mysq:
          context: myctx
          requires:
            - build-arbiter2
          filters:
            branches:
              only:
                - dev
      - publish-arbiter2-image:
          context: myctx
          requires:
            - build-arbiter2
          filters:
            branches:
              only:
                - dev
      - build-dipper:
          context: myctx
          filters:
            branches:
              only:
                - dev
      - publish-dipper-image:
          context: myctx
          requires:
            - build-dipper
          filters:
            branches:
              only:
                - dev
      - redeploy-services:
          context: myctx
          requires:
            - publish-arbiter2-image
            - publish-dipper-image
          filters:
            branches:
              only:
                - dev